import os
import sys
import platform
import tempfile
import subprocess
import time
import numpy as np

verboseDebug = False
g_enableTiming = False

if verboseDebug: print("Init Module...")



# ------------------- Check Progress ---------------------
# Returns (ProgressValueFloat, ProgressText, SleepTimeAdvice)
# ProgressValues: 
#  . in [0, 1] : computing
#  . 2 : success
#  . -3 or -4: remesher crashed
#  . -10: "no progress file, after significant time"
#  . -11: bad progress file format
#  . -xxx : errors returned by engine
class QRCheckProgressData:
    def __init__(self):
        self.ProgressFilename = ''
        self.CheckProgressCounter = 0
        self.RemeshingProcess = None
        self.StartRemeshingTime = 0
        self.ProgressFileHasBeenCreatedYet = False

    def reset(self):
        self.ProgressFilename = ''
        self.CheckProgressCounter = 0
        self.RemeshingProcess = None
        self.StartRemeshingTime = 0
        self.ProgressFileHasBeenCreatedYet = False

    def onStartRemeshing(self):  # called just before subprocess.Popen(...)
        self.CheckProgressCounter = 0
        self.StartRemeshingTime = time.time()
        self.ProgressFileHasBeenCreatedYet = False

    def get_progress_status(self):

        self.CheckProgressCounter = self.CheckProgressCounter+1

        # outputs:
        ProgressText = ""
        ProgressValueFloat = None
        SleepTimeAdvice = None
    
        # read progress file:
        progressLines=[]
        try:
            pf = open(self.ProgressFilename, "r")
            progressLines = pf.read().splitlines()
            pf.close()
        except Exception:
            # progressFile does not exist or can't be open!
            CurTimeFromStart = time.time() - self.StartRemeshingTime
            if self.ProgressFileHasBeenCreatedYet == False:   # and progressFile has not yet been created previously
                if CurTimeFromStart < 3 :
                    return 0, "", None   # simply wait more
                elif CurTimeFromStart < 40 :  # after 3 seconds without progressFile...
                    if (self.RemeshingProcess != None and self.RemeshingProcess.poll() != None):
                        ProgressText = "Remeshing Failed! (Returned without ProgressFile - 0)"
                        return -4, ProgressText, None
                    return 0, "", None
                else:  # after 40 seconds without progressFile... => return error !
                    print(' ERROR : no progressFile after 40 sec....')
                    return -10, "", None
            else:
                return 0, "", None  # strange case: progressFile can't be read (dont exist) but has already been created...)

        self.ProgressFileHasBeenCreatedYet = True

        if len(progressLines)>=1:
            try:
                ProgressValueFloat = float(progressLines[0]) # value in [0,1] or <0 : error
            except Exception:
                return -11, "", None
        
            if ProgressValueFloat != None:
                # Error ?
                if (ProgressValueFloat < 0):
                    if len(progressLines)>=2:
                        ProgressText = progressLines[1]

                    return ProgressValueFloat, ProgressText, 0
            
                # Succeded ?
                if ProgressValueFloat == 2:
                    return ProgressValueFloat, "", 0

                # check process is running: (NB need to be done in 2 cases : during remeshing + if remesher can't
                #if (GetProgressCounter > 5 and GetProgressCounter % 4 == 0): # only every 4 timers (~1 sec)
                if (self.CheckProgressCounter > 5 and self.CheckProgressCounter % 4 == 0): # only every 4 timers (~1 sec)
                    #if (RemeshingProcess.poll() != None):
                    if (self.RemeshingProcess != None and self.RemeshingProcess.poll() != None):
                        ProgressText = "Remeshing Failed! (Stopped without result)"
                        return -3, ProgressText, 0

                # computing...            
                if len(progressLines)>=3:
                    try:
                        SleepTimeAdvice = float(progressLines[2])
                    except Exception:
                        SleepTimeAdvice = None

                return ProgressValueFloat, ProgressText, SleepTimeAdvice
    
        # check process is running: (before any no progress file written)
        if (self.CheckProgressCounter > 8 and self.CheckProgressCounter % 4 == 0):
            if (self.RemeshingProcess != None and self.RemeshingProcess.poll() != None):
                ProgressValueFloat = -4    # this means that the remesher crashed
                ProgressText = "Remeshing Failed! (Returned without ProgressFile)"
                return ProgressValueFloat, ProgressText, None

        ProgressValueFloat = -11
        ProgressText = "Remeshing Failed! (Bad ProgressFile Data)"
        return ProgressValueFloat, ProgressText, None






def unixifyPath(path):
    path = path.replace('\\', '/')
    return path

# NB: same code must be in the Scripts (for buttons)
def getQREngineFolder():
    isMacOS = (platform.system()=="Darwin") or (platform.system()=="macosx")
    isLinux = (platform.system()=="Linux")
    if (isMacOS):
        engineFolder = "/Users/Shared/Exoside/QuadRemesher/Datas_Houdini/QuadRemesherEngine_1.2"
        return engineFolder
    elif (isLinux):
        engineFolder = "~/.local/share/Exoside/QuadRemesher/Datas_Houdini/QuadRemesherEngine_1.2"
        engineFolder = os.path.expanduser(engineFolder)
        return engineFolder
    else:
        #appData = os.getenv('APPDATA')  windows ... UserName/../Roaming... 
        appData = os.getenv('ALLUSERSPROFILE')  # on windows : C:\Users\All Users == C:\ProgramData\
        engineFolder = os.path.join(appData, "Exoside/QuadRemesher/Datas_Houdini/QuadRemesherEngine_1.2")
        return engineFolder

def getQREnginePath():
    global verboseDebug
    engineFolder = getQREngineFolder()
    isMacOS = (platform.system()=="Darwin") or (platform.system()=="macosx")
    isLinux = (platform.system()=="Linux")
    if isMacOS:
        enginePath = os.path.join(engineFolder, 'xremesh')
    elif isLinux:
        enginePath = os.path.join(engineFolder, 'xremesh')
    else:
        enginePath = os.path.join(engineFolder, 'xremesh.exe')
    if verboseDebug: print("  enginePath=%s" % enginePath)
    return enginePath
 
def debug_returnStartLoadRetopoTime(startLoadRetopoTime):
    # NB: as load is done outside or this script, can't return the endLoadRetopoTime, only the startLoadRetopoTime..
    try:
        enginePath = getQREnginePath()
        subprocess.Popen([enginePath, "-returnChrono", "-startImportRetopoTime", str(startLoadRetopoTime)])   #NB: Popen automatically add quotes around parameters when there are SPACES inside
    except:
        return None
    
  
# filename = sectionname
# returns : True:OK   False:NoSectionFound
# doc : https://www.sidefx.com/docs/houdini/hom/hou/HDASection.html
#       https://www.sidefx.com/docs/houdini/hom/hou/HDADefinition.html
def installOneFileSection(node, filename, targetFolder, printErrorIfFailed=False):
    try:
        # NB: if the file is declared in the ExtraFiles tab, hasSection returns True
        #    if the physical section file is deleted, Houdini will automatically create an empty file, and section.size() returns -1
        if node.type().definition().hasSection(filename):
            section = node.type().definition().sections().get(filename)
            #print("libraryFilePath = " + node.type().definition().libraryFilePath())
            #print("extraFileOptions = " + str(node.type().definition().extraFileOptions()))
            if section.size()<=0:
                # Labs case.... no need to print an error
                #print("WARNING: empty section!")
                return False
            if sys.version_info[0] <= 2:
                SectionFile = file(os.path.join(targetFolder, filename), "wb")
                SectionFile.write(section.contents())
                SectionFile.close()
            else:
                # python3: file() is not supported anymore + need to use binaryContents() instead of contents()
                #SectionFile = file(os.path.join(targetFolder, filename), "wb")
                SectionFile = open(os.path.join(targetFolder, filename), "wb")
                SectionFile.write(section.binaryContents())
                SectionFile.close()
        else:
            #print("WARNING! missing Section :"+filename)
            return False
    except:
        import traceback
        msg = "installOneFileSection ERROR: " + str(traceback.format_exc())
        msg = msg + "\nzipfile = " + os.path.join(targetFolder, filename)
        print(msg)
        return False

    return True
        
def createFolder(folder):
    if not os.path.exists(folder):
        os.makedirs(folder)
    return folder

def fixExecutableMode(path):
    import stat
    st = os.stat(path)
    # NB:S_IEXEC=executeByUser    S_IXUSR=executeByUser    S_IXGRP=executeByGroup    S_IXOTH=executeByOther
    newMode = st.st_mode | (stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH)
    if (st.st_mode != newMode):
        os.chmod(path, newMode)
    
# return values:
# 0 : nothing done
# 1 : if the QuadRemesher has been installed
# negative : if the QuadRemesher has not been downloaded/installed : error!
# NB: node must be the QuadRemesher SOP, not the python node inside
def InstallQuadRemesherEngineIfNeeded(qrnode, ForceInstall=False, DownloadOnly=False):
    global verboseDebug
    if verboseDebug: print("InstallQuadRemesherEngineIfNeeded ForceInstall=%d  DownloadOnly=%d" % (ForceInstall,DownloadOnly))
    
    enginePath = getQREnginePath()
    if ForceInstall:
        if os.path.exists(getQREngineFolder()):
            if verboseDebug: print("Forceinstall engine -> remove existing engine")
            import shutil
            shutil.rmtree(getQREngineFolder())
    else:
        if os.path.exists(enginePath):
            if verboseDebug: print("-----Engine already installed !!!")
            return (0, "-----Engine already installed !!!")
    
    # test if the engine is inside sections:
    if DownloadOnly==False:
        r, msg = InstallEngineFromSections(qrnode)
        if r == 1:
            return (r, msg)
        
    # by downloading
    r, msg = InstallQuadRemesherEngine_Download()
    return (r, msg)

    
def InstallQuadRemesherEngine_FromZip(zip_file_name, engineFolder):
    global verboseDebug
    if verboseDebug: print("InstallQuadRemesherEngine_FromZip.....")
    # unzip
    try:
        from zipfile import ZipFile
        with ZipFile(zip_file_name, 'r') as zip: 
            zip.extractall(engineFolder) 
        
    except :
        import traceback
        msg = "Install remesher Engine ERROR: Unzip Failed" + str(traceback.format_exc()) + "\n"
        print(msg)
        return (-1, msg)
        
    # delete zip
    os.remove(zip_file_name)
        
    # python unzip is losing file modes...
    isMacOSX = (platform.system()=="Darwin") or (platform.system()=="macosx")
    isLinux = (platform.system()=="Linux")
    if isMacOSX:
        try:
            fixExecutableMode(os.path.join(engineFolder, 'xremesh'))
            fixExecutableMode(os.path.join(engineFolder, 'xrLicenseManager.app/Contents/MacOS/xrLicenseManager'))
        except :
            import traceback
            msg = "--- fix file mode failed ---" + str(traceback.format_exc()) + "\n"
            print(msg)
            return (-2, msg)
    if isLinux:
        try:
            fixExecutableMode(os.path.join(engineFolder, 'xremesh'))
            fixExecutableMode(os.path.join(engineFolder, 'xrLicenseManager'))
        except :
            import traceback
            msg = "--- fix file mode failed ---" + str(traceback.format_exc()) + "\n"
            print(msg)
            return (-2, msg)

    return (1, "")
            

def InstallQuadRemesherEngine_Download():
    global verboseDebug
    if verboseDebug: print("InstallQuadRemesherEngine_Download.....")
    engineFolder = getQREngineFolder()
    enginePath = getQREnginePath()
    if not os.path.exists(engineFolder):
        os.makedirs(engineFolder)
        
    # download first  (NB: python version ????? )
    with hou.InterruptableOperation("Downloading QuadRemesher Engine...", open_interrupt_dialog=True) as IntOp:    
        print("Info: Downloading QuadRemesher Engine...")
        try:
            isMacOSX = (platform.system()=="Darwin") or (platform.system()=="macosx")
            isLinux = (platform.system()=="Linux")
            zip_file_name = os.path.join(engineFolder, "install_engine.zip")
            if isMacOSX:
                # NB: https fails on macOS here
                download_url = "http://exoside.com/quadremesherdata/quad_remesher_engine_1.2_macOS.zip"
            elif isLinux:
                download_url = "http://exoside.com/quadremesherdata/quad_remesher_engine_1.2_linux.zip"
            else:
                download_url = "https://exoside.com/quadremesherdata/quad_remesher_engine_1.2_win.zip"
            if sys.version_info[0] <= 2:
                import urllib
                urllib.urlretrieve(download_url, zip_file_name)
            elif sys.version_info[0] <= 3:
                import urllib.request
                urllib.request.urlretrieve(download_url, zip_file_name)
            if not os.path.exists(zip_file_name):
                msg = "ERROR : Failed to download Quad Remesher Engine. You should install it manually!"
                print(msg)
                return (-2, msg)
        except Exception:
            import traceback
            msg = "ERROR: Failed to download Quad Remesher Engine." + str(traceback.format_exc()) + "\n"
            print(msg)
            return (-2, msg)
        
        InstallQuadRemesherEngine_FromZip(zip_file_name, engineFolder)
    # end of IntOp
    
    print("-------- QuadRemesher Engine installed succesfully! -------")
    return (1, "-------- QuadRemesher Engine installed succesfully! -------")
            

    
def InstallEngineFromSections(node):
    global verboseDebug
    if verboseDebug: print("InstallEngineFromSections.....")
    enginePath = getQREnginePath()

    #for s in node.type().definition().sections():
    #    print("sections : dict["+s+"] = "+str(node.type().definition().sections()[s]))
        
    engineFolder = getQREngineFolder()
    if not os.path.exists(engineFolder):
        os.makedirs(engineFolder)
    imagesFolder = createFolder(os.path.join(engineFolder, 'resources/images'))

    isMacOS = (platform.system()=="Darwin") or (platform.system()=="macosx")
    isLinux = (platform.system()=="Linux")
    if isMacOS:
        # extract the zip from the sections
        sectionOk = installOneFileSection(node, "QuadRemesherEngine_macOS.zip", engineFolder)
        zip_file_name = os.path.join(engineFolder, "QuadRemesherEngine_macOS.zip")
        if sectionOk == False:
            return (-1, "section not found")

    elif isLinux:
        # extract the zip from the sections
        sectionOk = installOneFileSection(node, "QuadRemesherEngine_Linux.zip", engineFolder)
        zip_file_name = os.path.join(engineFolder, "QuadRemesherEngine_Linux.zip")
        if sectionOk == False:
            return (-1, "section not found")

 
    else: # Win
        sectionOk = installOneFileSection(node, "QuadRemesherEngine_Win.zip", engineFolder)
        zip_file_name = os.path.join(engineFolder, "QuadRemesherEngine_Win.zip")
        if sectionOk == False:
            return (-1, "section not found")

    r, msg = InstallQuadRemesherEngine_FromZip(zip_file_name, engineFolder)
    if (r != 1):
        return (r, msg)
        
    msg = "--------- QuadRemesher Engine Installed (from hda) !-------------"
    print(msg)
    return (1, msg) 

# ----------------- exo mesh io ---------------
import struct
from array import array
def writeFloat(fp, value):
    fp.write(struct.pack('=f', value))
def writeInt32(fp, value):
    fp.write(struct.pack('=i', value))
def writeUInt32(fp, value):
    fp.write(struct.pack('=I', value))
def writeUInt32ArrayAsBloc(fp, values, blocId, extraIntTag=0):
    fp.write(struct.pack('=i', blocId))
    fp.write(struct.pack('=i', len(values)*4))
    fp.write(struct.pack('=i', len(values)))
    fp.write(struct.pack('=i', extraIntTag))
    for value in values:
        fp.write(struct.pack('=i', value))


def exportExoMesh(filename, geo, node, exportPointColors=True, exportMatGroups=True, exportNormals=True, exportUVs=False, exportEdgeGroups=False):
    fp=open(filename, 'wb')

    numBlocs = 15 # can be a maximum ....
    nv = len(geo.points())
    nf = len(geo.prims())
    nc = 0
    nUV = 0
   
    # extract faces
    faceBlocs = array('i')
    faceIndices = array('i')
    faceBlocs.append(0)
    for prim in geo.prims():
        for v in prim.vertices():
            # NB: v is a Vertex == a corner == not shared,   a point is the entity which is shared
            p = v.point()
            faceIndices.append(p.number())
            nc+=1
        faceBlocs.append( nc )
       
    writeInt32(fp, 0) # should be EXM0
    writeInt32(fp, 0)
    writeInt32(fp, numBlocs)
    writeInt32(fp, nv)
    writeInt32(fp, nf)
    writeInt32(fp, nc)
    writeInt32(fp, nUV)
    writeInt32(fp, 0)
    writeInt32(fp, 0)
   
       
    # write faces:
    writeUInt32ArrayAsBloc(fp, faceBlocs, 106)
    writeUInt32ArrayAsBloc(fp, faceIndices, 105, extraIntTag=1)  # extraIntTag=1 means that face ordering must be reversed, because FBX import will reverse faces as well...

    # write points
    fp.write(struct.pack('=i', 100))
    fp.write(struct.pack('=i', nv*12))
    fp.write(struct.pack('=i', nv))
    fp.write(struct.pack('=i', 0))
    for point in geo.points():
        pos = point.position()
        fp.write(struct.pack('fff', pos.x(), pos.y(), pos.z()))
 
        
    # write normals (direct by corner):
    if (exportNormals):
        try:
            av = geo.vertexFloatAttribValues("N")
            if av and len(av)==nc*3:
                fp.write(struct.pack('=i', 153))
                fp.write(struct.pack('=i', nc*12))
                fp.write(struct.pack('=i', nc))
                fp.write(struct.pack('=i', 0))
                for n in av:
                    fp.write(struct.pack('f', n))
        except (hou.Error, e):
            av = None # no Normals!
        except (Exception, e):
            print("Warning: exception while exporting Normals..."+str(e))
            
    # write UVs (direct by corner, UVW actually!):
    if exportUVs:
        try:
            av = geo.vertexFloatAttribValues("uv")
            if av and len(av)==3*nc:
                #print("Has UVs : "+str(len(av)))
                fp.write(struct.pack('=i', 151))
                fp.write(struct.pack('=i', nc*12))
                fp.write(struct.pack('=i', nc))
                fp.write(struct.pack('=i', 0))
                for u in av:
                    fp.write(struct.pack('f', u))
        except (hou.Error, e):
            av = None # no UVs!
        except (Exception, e):
            print("Warning: exception while exporting UVs..."+str(e))
            
    # write PointColors (direct by point):
    if exportPointColors:
        try:
            av = geo.pointFloatAttribValues("Cd")
            if av and len(av)==3*nv:
                #print("Has Colors : "+str(len(av)))
                ''' export as Byte
                fp.write(struct.pack('=i', 156))
                fp.write(struct.pack('=i', nv*3))
                fp.write(struct.pack('=i', nv))
                fp.write(struct.pack('=i', 0))
                for c in av:
                    # NB: need the test c in [0,1] to avoid throwing an exception
                    if c<0:
                        fp.write(struct.pack('B', 0))
                    elif c>1.0:
                        fp.write(struct.pack('B', 255))
                    else:
                        fp.write(struct.pack('B', c*255))
                 '''
                 
                 # export as Floats
                fp.write(struct.pack('=i', 156))
                fp.write(struct.pack('=i', nv*12))
                fp.write(struct.pack('=i', nv))
                fp.write(struct.pack('=i', 0))
                for c in av:
                    fp.write(struct.pack('f', c))
        except (hou.Error, e):
            av = None # no Colors!
        except :
            print("Warning: exception while exporting colors...")
        
    # write DensityFactor by point: (values in [0, 1]   0 means 4 times Bigger Quads    1 means 4 times Smaller Quads
    ''' right now DensityAttribName is invisible... not finished...
    try:
        densityAttribName = node.parm("DensityAttribName").eval()
        if (densityAttribName != ""):
            av = geo.pointFloatAttribValues(densityAttribName)
            if av and len(av)==nv:
                #print("Has Density Attrib : "+str(len(av)))
                fp.write(struct.pack('=i', 230))
                fp.write(struct.pack('=i', nv*4))
                fp.write(struct.pack('=i', nv))
                fp.write(struct.pack('=i', 0))
                # nd means normalized density in [0, 1], d = real density factor in [0.25, 4]
                for nd in av:
                    if (nd < 0):
                        d = 0.25
                    elif (nd < 0.5):
                        d = nd * 1.5 + 0.25
                    elif nd < 1:
                        d = nd * 6 - 2
                    else:
                        d = 4
                    fp.write(struct.pack('f', d))
        
    except :
        print ("warning: cannot find point attribute :"+str(densityAttribName))
        av = None
    '''

    # write MaterialIds (direct by prim):
    if exportMatGroups:
        try:
            av = geo.primStringAttribValues("shop_materialpath")
            if av and len(av)==nf:
                #print("Has MatIds : "+str(len(av)))
                fp.write(struct.pack('=i', 210))
                fp.write(struct.pack('=i', nf*4))
                fp.write(struct.pack('=i', nf))
                fp.write(struct.pack('=i', 0))
                materialDict = dict([('',0)])
                materialCounter = 0
                testCountWrite=0
                for m in av:
                    try:
                        index = materialDict[m]
                    except: # not found
                        materialCounter+=1
                        #print("new mat index for '"+str(m)+"'")
                        materialDict[m] = materialCounter
                        index = materialCounter
                        
                    fp.write(struct.pack('=i', index))
                    testCountWrite += 1
                #print("testCountWrite="+str(testCountWrite))
        except :
            #import traceback
            #print("MatIds : "+str(traceback.format_exc()))
            av = None
            print("Warning: exception while exporting MaterialIds...")
            
    # Face Groups: (sent as polygongroups)
    try:
        if (node.parm("UsePrimitiveGroups").eval()):
            if (len(geo.primGroups()) > 0):
                mygroups = np.zeros(nf, dtype=int)
                groupIndex=0
                for primGroup in geo.primGroups():
                    groupIndex += 1 
                    for prim in primGroup.prims():
                        facIndex = prim.number()
                        mygroups[facIndex] = groupIndex
                fp.write(struct.pack('=i', 200))
                fp.write(struct.pack('=i', nf*4))
                fp.write(struct.pack('=i', nf))
                fp.write(struct.pack('=i', 0))
                # polygroups array:
                for g in mygroups:
                    fp.write(struct.pack('=i', g))
    except :
        print("warning: exception raised while retrieving primitive groups")
        av = None
    
    # Specified PrimitiveAttribute (sent as polygroups)
    try:
        primName = node.parm("PrimitiveAttribName").eval()
        #if (node.parm("UsePrimitiveAttrib").eval() and primName != ""):
        if (primName != ""):
            av = geo.primIntAttribValues(primName)
            if av and len(av)==nf:
                #print("Has Attribute : "+str(primName)+"  "+str(len(av)))
                fp.write(struct.pack('=i', 200))
                fp.write(struct.pack('=i', nf*4))
                fp.write(struct.pack('=i', nf))
                fp.write(struct.pack('=i', 0))
                for a in av:
                    fp.write(struct.pack('=i', a))
    except :
        print ("warning: cannot find primitive attribute :"+str(primName))
        av = None
    
       
    # Edge Groups : sent as Edge Selection
    if exportEdgeGroups:
        try:
            if (len(geo.edgeGroups()) > 0):
                # count:
                edgCount=0
                for edgeGroup in geo.edgeGroups():
                    edgCount += len(edgeGroup.edges())
                if edgCount>0:
                    fp.write(struct.pack('=i', 401))
                    fp.write(struct.pack('=i', edgCount*2*4))
                    fp.write(struct.pack('=i', edgCount))
                    fp.write(struct.pack('=i', 0))
                    #sel info
                    fp.write(struct.pack('=i', 0)) # name string: no name here 
                    
                    # write array of point couple.
                    fp.write(struct.pack('Q', 2*edgCount))  # array size = UInt64 = 'Q'
                    for edgeGroup in geo.edgeGroups():
                        for edg in edgeGroup.edges():
                            edgPoints = edg.points()
                            if len(edgPoints) == 2:
                                fp.write(struct.pack('=i', edgPoints[0].number()))
                                fp.write(struct.pack('=i', edgPoints[1].number()))
                            else:
                                fp.write(struct.pack('=i', 0))
                                fp.write(struct.pack('=i', 0))
        except :
            print("warning: exception raised while retrieving edge groups")
                    
            
    
    # Ending Bloc
    fp.write(struct.pack('=i', 99))
    fp.write(struct.pack('=i', 0))
    fp.write(struct.pack('=i', 0))
    fp.write(struct.pack('=i', 0))
   
    fp.close()

    
def UsePrimitiveAttrib(node):
    try:
        return node.parm("PrimitiveAttribName").eval() != ""
    except :
        return False
    

# ------------------------- do Remeshing -----------------------------
# NB: node is the python node inside the "QuadRemesher SOP"
def doRemeshing(node):
    global verboseDebug
    global g_enableTiming
    
    # --------- 1st time : install remesher : 
    installCode = InstallQuadRemesherEngineIfNeeded(node)
    if installCode[0]<0:
        raise hou.NodeError("Cannot install RemesherEngine!")
        return

    isMacOSX = (platform.system()=="Darwin") or (platform.system()=="macosx")
    isLinux = (platform.system()=="Linux")

    if g_enableTiming: chrono_startRemeshingTime = time.time()

    # get input geometry            
    geo = node.geometry()
    node = node.parent()  # here node become the QuadRemesher SOP node
    
    # get parameters
    _TargetQuadCount = node.parm("TargetQuadCount").eval()
    _CurvatureAdaptivness = node.parm("AdaptiveSize").eval()
    _AdaptQuadCount = node.parm("AdaptiveQuadCount").eval()
    _UseVertexColors = node.parm("UseVertexColors").eval()
    _UseMaterialGroups = node.parm("UseMaterialGroups").eval()
    _UsePrimitiveGroups = node.parm("UsePrimitiveGroups").eval()
    _UsePrimitiveAttrib = UsePrimitiveAttrib(node)
    _UseEdgeGroups = node.parm("UseEdgeGroups").eval()
    _AutoDetectHardEdges = node.parm("DetectHardEdges").eval()
    _UseNormalsSplitting = node.parm("UseNormalsSplitting").eval()
    _SymX = node.parm("SymX").eval()
    _SymY = node.parm("SymY").eval()
    _SymZ = node.parm("SymZ").eval()
    
            
    # define some paths:
    # not possible : __file__ is not defined!   script_folder = os.path.dirname(os.path.realpath(__file__))
    
    if isMacOSX :
        XRTempFolder = tempfile.gettempdir()
        #XRTempFolder = "/var/tmp/Exoside"
    elif isLinux:
        XRTempFolder = tempfile.gettempdir()
    else :
        XRTempFolder = tempfile.gettempdir() # gettempdir() => c:\users\max\appdata\local\temp\houdini_temp
        XRTempFolder = unixifyPath(XRTempFolder)
    XRTempFolder = os.path.join(XRTempFolder, "QuadRemesher")
    if verboseDebug: print("TempFolder = "+ XRTempFolder)
    if not os.path.exists(XRTempFolder):
        os.makedirs(XRTempFolder)
    
    progressData = QRCheckProgressData()

    export_path = XRTempFolder
    exportFilename = os.path.join(export_path, 'QR_input.exomesh')
    retopoFilename = node.parm("out_cache").eval()

    # Problem with retopoFilename with Houdini 18.5.499 :
    #   out_cache = ${HIP}/render/${HIPNAME}_${OS}_QR_output.fbx
    #   NB: to get this string with global var replacement : node.parm("out_cache").unexpandedString()
    # If the scene is saved, ${HIP} returns the folder in which the file is saved! -> perfect
    # If the scene is not yet saved:
    #   before 18.5.499 : ${HIP} was returning C:/Users/YOUR_NAME
    #   in 18.5.49: ${HIP} return the folder in which houdini exe is !!! (-> can't use this folder due to permission access!) THE PROBLEM IS HERE !!!
    # FIX = detect case where the scene is not saved and change the folder !
    if (hou.getenv("HIPNAME")=="untitled") and (hou.getenv("JOB") == hou.getenv("HIP")):   # scene not yet saved + can't save in JOB...
        if node.parm("out_cache").unexpandedString().find("${HIP}") >= 0:
            retopoFilename = os.path.join(export_path, 'untitled_%s_QR_output.fbx' % hou.getenv("OS"))
            node.parm("out_cache").set(retopoFilename) # set for the sub-node which will load it!
            
    '''
    nodehash = hash(hou.getenv("HIPNAME") + hou.pwd().path())
    retopoFilename = retopoFilename.replace("[HASHVALUE]", str(nodehash), 1)
    '''
    if verboseDebug:
        print ("retopoFilename="+retopoFilename)
        print ("hou.pwd().path() ="+str(hou.pwd().path()))
        print ("HIP ="+str(hou.getenv("HIP")))
        print ("HIPNAME ="+str(hou.getenv("HIPNAME")))
        print ("HIPFILE="+str(hou.getenv("HIPFILE")))
        print ("HOME ="+str(hou.getenv("HOME")))
        print ("JOB ="+str(hou.getenv("JOB")))
        print ("OS ="+str(hou.getenv("OS")))
        #print ("node hash ="+str(nodehash))
        #return 0
    
    settingsFilename = os.path.join(export_path, 'RetopoSettings_Hdi.txt')
    progressData.ProgressFilename = os.path.join(export_path, 'progress.txt')
    
    engineFolder = getQREngineFolder()
    enginePath = getQREnginePath()
    
    exportFilename = unixifyPath(exportFilename)
    retopoFilename = unixifyPath(retopoFilename)
    settingsFilename = unixifyPath(settingsFilename)
    progressData.ProgressFilename = unixifyPath(progressData.ProgressFilename)
    enginePath = unixifyPath(enginePath)

        
    # start progress bar
    with hou.InterruptableOperation("Remeshing '"+node.name()+"' ...", open_interrupt_dialog=True) as IntOp:    
        
        # ----- export mesh to retopo -----
        if (exportFilename.endswith('.exomesh')):
            exportExoMesh(exportFilename, geo, node, exportPointColors=_UseVertexColors, exportMatGroups=_UseMaterialGroups, exportNormals=_UseNormalsSplitting, exportEdgeGroups=_UseEdgeGroups, exportUVs=False)
        else:
            startTime = time.time()
            geo.saveToFile(exportFilename)
            endTime = time.time()
            #print("export time = "+str(endTime-startTime)+" s ("+exportFilename+")")
        if verboseDebug: print("export done!")
        

        # ----- export remesh settings -----
        if verboseDebug: print("Start write settings... in:" + settingsFilename)
        settings_file = open(settingsFilename, "w")
        settings_file.write('HostApp=Houdini\n')
        settings_file.write('FileIn="%s"\n' % exportFilename)
        settings_file.write('FileOut="%s"\n' % retopoFilename)
        settings_file.write('ProgressFile="%s"\n' % progressData.ProgressFilename)
        
        settings_file.write("TargetQuadCount=%s\n" % str(_TargetQuadCount))
        settings_file.write("CurvatureAdaptivness=%s\n" % str(_CurvatureAdaptivness))
        settings_file.write("ExactQuadCount=%d\n" % (not _AdaptQuadCount))
        settings_file.write("UseVertexColorMap=%d\n" % _UseVertexColors)
        
        settings_file.write("UseMaterialIds=%d\n" % _UseMaterialGroups)      
        #settings_file.write("UsePolygonGroups=%d\n" % _UseMaterialGroups)  # NB: in obj exporter, the materials are exported as groups with 'g' tag
        #settings_file.write("UseHardEdgeFlags=%d\n" % _UseHardEdges)
        _UsePolygonGroups = (_UsePrimitiveGroups or _UsePrimitiveAttrib) # PrimitiveGroups are send as PolygonGroups
        settings_file.write("UsePolygonGroups=%d\n" % _UsePolygonGroups) 
        settings_file.write("UseEdgesSelections=%d\n" % _UseEdgeGroups) # PrimitiveGroups and PrimitiveAttributes are sent as Polygroups
        settings_file.write("AutoDetectHardEdges=%s\n" % str(_AutoDetectHardEdges))
        settings_file.write("UseIndexedNormals=%s\n" % str(_UseNormalsSplitting))
        
        symStr = ''
        if _SymX: symStr += 'X'
        if _SymY: symStr += 'Y'
        if _SymZ: symStr += 'Z'
        settings_file.write("SymAxis=%s\n" % symStr)
        settings_file.write("SymLocal=1\n")
        
        # set IsProceduralRemeshing to prevent from launching multiple times the LicenseManager (at first usage...)
        settings_file.write("IsProceduralRemeshing=1\n")
        
        if g_enableTiming:
            settings_file.write("Timing_StartRemesh_Time=%f\n" % chrono_startRemeshingTime)
            settings_file.write("Timing_InputMeshExported_Time=%f\n" % time.time()) # this time must include (partially) the txt settings writing.

        settings_file.close()
        if verboseDebug: print("write settings done!")
        
        
        # ----- run the remeshing engine -----
        try:
            if (os.path.isfile(retopoFilename)):
                os.remove(retopoFilename)
            if (os.path.isfile(progressData.ProgressFilename)):
                os.remove(progressData.ProgressFilename)

            progressData.onStartRemeshing()

            # using subprocess
            #print("Launch : path=" + enginePath + "\n")
            #print("    settings_path=" + settingsFilename + "\n")
            progressData.RemeshingProcess = subprocess.Popen([enginePath, "-s", settingsFilename])   #NB: Popen automatically add quotes around parameters when there are SPACES inside
        
        except Exception:
            import traceback
            print("Execute remesher error: " + str(traceback.format_exc()) + "\n")
                
        # Wait for result:
        Aborted = False
        ProgressValue = 0
        ProgressText = ""
        sleepTime=0.05 # start with low value, updated after... check progress every 'sleepTime'
        
        #while not os.path.exists(retopoFilename):
        while True:
        
            time.sleep(sleepTime)   # time in seconds

            ProgressValueFloat, ProgressText, SleepTimeAdvice = progressData.get_progress_status()

            if ProgressValueFloat < 0:     # Error ?
                break
            elif ProgressValueFloat >= 2:  # success ?
                break
            else:
                newPBarValue = int( (99.0 * ProgressValueFloat + 1.0) * 10.0) / 10.0
                try:
                    IntOp.updateProgress(newPBarValue / 100.0)
                except hou.OperationInterrupted:
                    Aborted = True
        
                # update sleepTime
                if SleepTimeAdvice != None and SleepTimeAdvice > 0:
                    #if sleepTime != SleepTimeAdvice: print(" Changing SleepTime : %f -> %f" % (sleepTime, SleepTimeAdvice))
                    sleepTime = SleepTimeAdvice
            
            if Aborted:
                break
        # end of while loop
    # end of with InteruptableOpration
    
    if Aborted:
        if verboseDebug: print("Aborted : kill process")
        progressData.RemeshingProcess.kill()
        return
    
    if verboseDebug: print("ProgressValueFloat = "+str(ProgressValueFloat))
    
    if ProgressValueFloat < 0:   # RemeshingFailed!
        if verboseDebug: print("ProgressValueFloat<0 : ProgressTest = '" + str(ProgressText) + "'\n")
        if (ProgressValueFloat == -2): # -2 means "license not yet activated"
            raise hou.NodeError("License not yet activated!")
        if (ProgressText != None and len(ProgressText)>0):
            #cmds.confirmDialog( title='QuadRemesher', message=ProgressText, button=['OK'])
            raise hou.NodeError(ProgressText)
        raise hou.NodeError("Remeshing failed")
    
    
    # ----- load retopo -----
    # NB: now, retopo is loaded from SOP sub nodes...
    #geo.clear()
    #geo.loadFromFile(retopoFilename)

    if g_enableTiming: 
        debug_returnStartLoadRetopoTime(time.time())




def buttonCookNow(node):
    # NB: cook() is not working if the node is locked!
    #     but Geometry is locked outside of a cook ...
    # NB: in AutoCook=Off mode
    #   the node is always cooked returning empty geometry, but the node is tagged as 'valid', not needing re-cook...
    #   So click on "Cook Now" will not re-cook, if I do not set 'force'
    #   I don't know a 
    try:
        #print("Cook Now!! : isCookNowCase="+str(isCookNowCase)+"    needToCook="+str(node.needsToCook()) )
        node.cook(force=True)
    #except object as e:
    except :
        print ("---- ERROR in CookNow... ----")
        import traceback
        print(str(traceback.format_exc()) + "\n")
    
   
def onPaint(args, node):
#    try:
#        print ("density new value = "+str(node.parm("PaintedQuadDensity").eval()))
#    except :
#        import traceback
#        print(str(traceback.format_exc()) + "\n")
    return None

def buttonLicMgr(node):
    InstallQuadRemesherEngineIfNeeded(node)
    
    engineFolder = getQREngineFolder()
    isMacOSX = (platform.system()=="Darwin") or (platform.system()=="macosx")
    isLinux = (platform.system()=="Linux")
    if isMacOSX:
        licenseManagerPath = os.path.join(engineFolder, 'xrLicenseManager.app/Contents/MacOS/xrLicenseManager')
    elif isLinux:
        licenseManagerPath = os.path.join(engineFolder, 'xrLicenseManager')
    else:
        licenseManagerPath = os.path.join(engineFolder, 'xrLicenseManager.exe')
    
    try:
        subprocess.Popen([licenseManagerPath, "-hostApp", "Houdini"])
    except :
        print ("ERROR: cannot launch License Manager")
        return


def buttonReset(node):
    global verboseDebug
    
    node.parm("TargetQuadCount").set(5000)
    node.parm("AdaptiveSize").set(50)
    node.parm("AdaptiveQuadCount").set(False)
    node.parm("UseMaterialGroups").set(False)
    node.parm("DetectHardEdges").set(True)
    node.parm("UseNormalsSplitting").set(False)
    node.parm("SymX").set(False)
    node.parm("SymY").set(False)
    node.parm("SymZ").set(False)
    node.parm("PaintedQuadDensity").set(1.0)

       
def buttonWebDoc(node):
    global verboseDebug
    
    try:
        import webbrowser
        webbrowser.open('https://exoside.com/quadremesherdata/plugins_webdoc_link.php?App=Houdini')
    except :
        import traceback
        print("Exception: in WebDoc..\n")
        print(str(traceback.format_exc()) + "\n")
       
def buttonUpdateEngine(node):
    InstallQuadRemesherEngineIfNeeded(node, ForceInstall=True, DownloadOnly=True)


def buttonSetPaintingColor():
    node = hou.pwd() # this is the QuadRemesher SOP
    paintNode = node.inputs()[0]  # potential paint SOP or Paint Attribute
    
    #print inputNode.type().name()
    if paintNode != None and  paintNode.type().name() != 'paint' and  paintNode.type().name() != 'attribpaint':
        paintNode = None

    # problem : can't set the painting color because the QR SOP is locked!!!
    ''' 
    if paintNode == None:
        # then use the paitn SOp inside the QuadRemesher
        for childNode in node.children():
            if childNode != None and childNode.type().name() == 'paint':
                paintNode = childNode
                break
    '''

    if paintNode == None:
        print("Needs to have a 'Paint' or Attribute Paint' SOP as immediate input of the QuadRemesher SOP. Create it!")
        return
    
    #inputNodeParms = paintNode.parms()
    #for p in inputNodeParms:
    #    print p
    
    #try:
    
    # -- get slider value --
    vertexColorSliderValue = node.parm('PaintedQuadDensity').eval()
    
    # -- convert to color --
    #Mapping: Slider in [0.25, 4]
    maxSliderValue = 4
    minSliderValue = 0.25
    normalizedValue = 0.0
    if vertexColorSliderValue > 1.0:
            normalizedValue = (vertexColorSliderValue - 1.0) / (maxSliderValue - 1.0)
    elif vertexColorSliderValue < 1.0:
            normalizedValue =  - ((1.0/vertexColorSliderValue) - 1.0) / ((1.0/minSliderValue) - 1.0)

    if (normalizedValue > 1):
            normalizedValue = 1
    if (normalizedValue < -1):
            normalizedValue = -1

    # -- normalizedValue to color
    r = 1.0
    g = 1.0
    b = 1.0
    if normalizedValue > 0.0:
            r = 1
            g = 1-normalizedValue
            b = 1-normalizedValue
    elif normalizedValue < 0.0:
            r = 1+normalizedValue
            g = 1
            b = 1
            
    #except Exception:
    #       print("Exception: in ..\n")

    # -- set the color in the PaintSOP --
    if paintNode.type().name() == 'paint':  # deprecated 'Paint' SOP
        paintNode.parm("fgr").set(r)
        paintNode.parm("fgg").set(g)
        paintNode.parm("fgb").set(b)
    else:
        # setup to paint on Color attribute
        if paintNode.parm("attribname1") != None:
            paintNode.parm("attribname1").set("Cd")
            paintNode.parm("attribtype1").set(0) # 0 means color
        else:
            print("Warning : cannot change the Painted Attribute Name fo 'Cd'")
        # set the painted color
        paintNode.parm("fgcolorr").set(r)
        paintNode.parm("fgcolorg").set(g)
        paintNode.parm("fgcolorb").set(b)
    
    paintNode.setSelected(True, clear_all_selected=True)
     
