MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY"

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPfallbacks"
Content-Type: application/external-reference

.OPfallbacks

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename=".OPdummydefs"
Content-Type: application/external-reference

.OPdummydefs

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="node_type"
Content-Type: text/plain

Sop

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.init"
Content-Type: text/plain

type = labs::av_photogrammetry::6.0
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -21.593 -1.3529
connectornextid 0
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1.init"
Content-Type: text/plain

type = labs::av_texturing::6.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -2.48991 -0.203017
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault off exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	color1 1 1 "input1"
}
inputs
{
0 	color1 0 1
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.98 0.275 0.275 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1.chn"
Content-Type: text/plain

{
    channel reload {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../reload3\") }
    }
    channel bExportLog {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bExportLog\") }
    }
    channel textureSide {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 8192 8192 expr = ch(\"../textureSide\") }
    }
    channel downscale {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../downscale2\") }
    }
    channel unwrapMethod {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../unwrapMethod\") }
    }
    channel useUDIM {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../useUDIM\") }
    }
    channel fillHoles {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../fillHoles\") }
    }
    channel correctEV {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../correctEV\") }
    }
    channel padding {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5 5 expr = ch(\"../padding\") }
    }
    channel multiBandDownscale {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../multiBandDownscale\") }
    }
    channel useScore {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../useScore\") }
    }
    channel bestScoreThreshold {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.10000000000000001 0.10000000000000001 expr = ch(\"../bestScoreThreshold\") }
    }
    channel angleHardThreshold {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 90 90 expr = ch(\"../angleHardThreshold\") }
    }
    channel processColorspace {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../processColorspace\") }
    }
    channel forceVisibleByAllVertices {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../forceVisibleByAllVertices\") }
    }
    channel flipNormals {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../flipNormals\") }
    }
    channel visibilityRemappingMethod {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../visibilityRemappingMethod\") }
    }
    channel subdivisionTargetRatio {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.80000000000000004 0.80000000000000004 expr = ch(\"../subdivisionTargetRatio\") }
    }
    channel bCustomImages {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bCustomImages\") }
    }
    channel customTextureImages {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../customTextureImages\") }
    }
    channel enablecustomenv {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enablecustomenv\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1.parm"
Content-Type: text/plain

{
version 0.8
cook	[ 0	locks=0 ]	(	0	)
reload	[ 0	locks=0 ]	(	[ reload	0 ] 	)
bExportLog	[ 0	locks=0	autoscope=0 ]	(	[ bExportLog	0 ] 	)
fd_environment	[ 0	locks=0 ]	(	0	)
enablecustomenv	[ 0	locks=0	autoscope=0 ]	(	[ enablecustomenv	0 ] 	)
customenv	[ 0	locks=0	autoscope=0 ]	(	`chs(\"../customenv\")`	)
sepparm	[ 0	locks=0 ]	(	)
fd_texturng	[ 0	locks=0 ]	(	0	)
textureSide	[ 0	locks=0	autoscope=0 ]	(	[ textureSide	8192 ] 	)
downscale	[ 0	locks=0	autoscope=0 ]	(	[ downscale	1 ] 	)
colorMappingFileType	[ 0	locks=0 ]	(	png	)
unwrapMethod	[ 0	locks=0	autoscope=0 ]	(	[ unwrapMethod	Basic ] 	)
useUDIM	[ 0	locks=0	autoscope=0 ]	(	[ useUDIM	1 ] 	)
fillHoles	[ 0	locks=0	autoscope=0 ]	(	[ fillHoles	0 ] 	)
correctEV	[ 0	locks=0	autoscope=0 ]	(	[ correctEV	0 ] 	)
fd_advanced	[ 0	locks=0 ]	(	0	)
padding	[ 0	locks=0	autoscope=0 ]	(	[ padding	5 ] 	)
multiBandDownscale	[ 0	locks=0	autoscope=0 ]	(	[ multiBandDownscale	4 ] 	)
useScore	[ 0	locks=0	autoscope=0 ]	(	[ useScore	1 ] 	)
bestScoreThreshold	[ 0	locks=0	autoscope=0 ]	(	[ bestScoreThreshold	0.1 ] 	)
angleHardThreshold	[ 0	locks=0	autoscope=0 ]	(	[ angleHardThreshold	90 ] 	)
processColorspace	[ 0	locks=0	autoscope=0 ]	(	[ processColorspace	sRGB ] 	)
forceVisibleByAllVertices	[ 0	locks=0	autoscope=0 ]	(	[ forceVisibleByAllVertices	0 ] 	)
flipNormals	[ 0	locks=0	autoscope=0 ]	(	[ flipNormals	0 ] 	)
visibilityRemappingMethod	[ 0	locks=0	autoscope=0 ]	(	[ visibilityRemappingMethod	PullPush ] 	)
subdivisionTargetRatio	[ 0	locks=0	autoscope=0 ]	(	[ subdivisionTargetRatio	0.8 ] 	)
bCustomImages	[ 0	locks=0	autoscope=0 ]	(	[ bCustomImages	0 ] 	)
customTextureImages	[ 0	locks=0	autoscope=0 ]	(	[ customTextureImages	"" ] 	)
version	[ 0	locks=0 ]	(	"Requires Meshroom/AliceVision version 2023.3.0"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	},
	"___toolcount___":{
		"type":"string",
		"value":"15"
	},
	"___toolid___":{
		"type":"string",
		"value":"object_spotlight"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1/obj_importer1/mesh_materials.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -0.108372 2.96062
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	clean_materialpaths 1 1 "input1"
}
inputs
{
0 	clean_materialpaths 0 1
}
stat
{
  create -1
  modify -1
  author Paul@DESKTOP-PAFFS1R
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1/obj_importer1/mesh_materials.parm"
Content-Type: text/plain

{
version 0.8
switchoriginal	[ 0	locks=0 ]	(	0	)
usemikkt	[ 0	locks=0	autoscope=0 ]	(	"on"	)
mMaterialEntries	[ 0	locks=0	autoscope=0 ]	(	1	)
materialdefinition_1	[ 0	locks=0 ]	(	"0"	)
materialname_1	[ 0	locks=0 ]	(	material_1001	)
groupselection_1	[ 0	locks=0 ]	(	@shop_materialpath=*material_1001	)
sepparm1	[ 0	locks=0 ]	(	)
folder0_1	[ 0	locks=0 ]	(	0	)
basecolorfolder_1	[ 0	locks=0 ]	(	0	)
principledshader_basecolor_texture_1	[ 0	locks=0 ]	(	C:\\Users\\Danicka\\AV_Cache\\av_rework_mononode\\11_Texturing\\texture_1001.png	)
principledshader_basecolor_1	[ 0	locks=0 ]	(	0.6000000238418579	0.6000000238418579	0.6000000238418579	)
opacityfolder_1	[ 0	locks=0 ]	(	0	)
principledshader_opaccolor_texture_1	[ 0	locks=0 ]	(	""	)
normalfolder_1	[ 0	locks=0 ]	(	0	)
principledshader_baseNormal_texture_1	[ 0	locks=0 ]	(	""	)
principledshader_baseNormal_flipY_1	[ 0	locks=0 ]	(	"off"	)
principledshader_roundedEdge_enable_1	[ 0	locks=0 ]	(	"off"	)
principledshader_roundedEdge_radius_1	[ 0	locks=0 ]	(	0	)
principledshader_roundedEdge_mode_1	[ 0	locks=0 ]	(	0	)
roughnessfolder_1	[ 0	locks=0 ]	(	0	)
principledshader_rough_texture_1	[ 0	locks=0 ]	(	""	)
principledshader_rough_1	[ 0	locks=0 ]	(	0.652	)
principledshader_ior_1	[ 0	locks=0 ]	(	1.1	)
folder0_1_4	[ 0	locks=0 ]	(	0	)
principledshader_occlusion_texture_1	[ 0	locks=0 ]	(	""	)
principledshader_occlusion_textureIntensity_1	[ 0	locks=0 ]	(	1	)
metallicfolder_1	[ 0	locks=0 ]	(	0	)
principledshader_metallic_texture_1	[ 0	locks=0 ]	(	""	)
principledshader_metallic_1	[ 0	locks=0 ]	(	0	)
folder0_1_2	[ 0	locks=0 ]	(	0	)
matcapshader_basecolor_texture_1	[ 0	locks=0 ]	(	$HH/pic/MatCap/OilClay.pic	)
matcapshader_use_texture_alpha_1	[ 0	locks=0 ]	(	"off"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_texturing1/obj_importer1/mesh_materials.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	},
	"___toolcount___":{
		"type":"string",
		"value":"2"
	},
	"___toolid___":{
		"type":"string",
		"value":"gamedev::sop_sop_quickmaterial"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_structure_from_motion1.init"
Content-Type: text/plain

type = labs::av_structure_from_motion::6.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_structure_from_motion1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 4.53629
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault off exposed on
outputsNamed3
{
0 "output1"
1 "output2"
}
inputsNamed3
{
2 	av_analyze_images1 0 1 "input1"
}
inputs
{
0 	av_analyze_images1 0 1
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.98 0.275 0.275 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_structure_from_motion1.chn"
Content-Type: text/plain

{
    channel reload {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../reload\") }
    }
    channel bExportLog {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bExportLog\") }
    }
    channel enablecustomenv {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enablecustomenv\") }
    }
    channel describerTypes {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../describerTypes2\") }
    }
    channel lockScenePreviouslyReconstructed {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../lockScenePreviouslyReconstructed\") }
    }
    channel useLocalBA {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../useLocalBA\") }
    }
    channel maxNumberOfMatches {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../maxNumberOfMatches\") }
    }
    channel minNumberOfMatches {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../minNumberOfMatches\") }
    }
    channel minInputTrackLength {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../minInputTrackLength\") }
    }
    channel lockAllIntrinsics {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../lockAllIntrinsics\") }
    }
    channel filterTrackForks {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../filterTrackForks\") }
    }
    channel localizerEstimator {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../localizerEstimator\") }
    }
    channel localizerEstimatorMaxIterations {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4096 4096 expr = ch(\"../localizerEstimatorMaxIterations\") }
    }
    channel localizerEstimatorError {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../localizerEstimatorError\") }
    }
    channel localBAGraphDistance {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../localBAGraphDistance\") }
    }
    channel minNumberOfObservationsForTriangulation {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../minNumberOfObservationsForTriangulation\") }
    }
    channel minAngleForTriangulation {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 3 3 expr = ch(\"../minAngleForTriangulation\") }
    }
    channel minAngleForLandmark {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../minAngleForLandmark\") }
    }
    channel maxReprojectionError {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../maxReprojectionError\") }
    }
    channel maxAngleInitialPair {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 40 40 expr = ch(\"../maxAngleInitialPair\") }
    }
    channel minAngleInitialPair {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5 5 expr = ch(\"../minAngleInitialPair\") }
    }
    channel observationConstraint {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../observationConstraint\") }
    }
    channel randomSeed {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5489 5489 expr = ch(\"../randomSeed2\") }
    }
    channel useOnlyMatchesFromInputFolder {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../useOnlyMatchesFromInputFolder\") }
    }
    channel useRigConstraint {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../useRigConstraint\") }
    }
    channel interFileExtension {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../interFileExtension\") }
    }
    channel outputFileType {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../outputFileType\") }
    }
    channel saveMetadata {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../saveMetadata\") }
    }
    channel saveMatricesTxtFiles {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../saveMatricesTxtFiles\") }
    }
    channel evCorrection {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../evCorrection\") }
    }
    channel rangeStart {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeStart2\") }
    }
    channel rangeSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../rangeSize2\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_structure_from_motion1.parm"
Content-Type: text/plain

{
version 0.8
cook	[ 0	locks=0 ]	(	0	)
reload	[ 0	locks=0 ]	(	[ reload	0 ] 	)
bExportLog	[ 0	locks=0	autoscope=0 ]	(	[ bExportLog	0 ] 	)
fd_enironment	[ 0	locks=0 ]	(	0	)
enablecustomenv	[ 0	locks=0	autoscope=0 ]	(	[ enablecustomenv	0 ] 	)
customenv	[ 0	locks=0	autoscope=0 ]	(	`chs(\"../customenv\")`	)
sepparm	[ 0	locks=0 ]	(	)
fd_structurefrommotion	[ 0	locks=0 ]	(	0	0	)
describerTypes	[ 0	locks=0	autoscope=0 ]	(	[ describerTypes	dspsift ] 	)
lockScenePreviouslyReconstructed	[ 0	locks=0	autoscope=0 ]	(	[ lockScenePreviouslyReconstructed	1 ] 	)
useLocalBA	[ 0	locks=0	autoscope=0 ]	(	[ useLocalBA	0 ] 	)
maxNumberOfMatches	[ 0	locks=0	autoscope=0 ]	(	[ maxNumberOfMatches	0 ] 	)
minNumberOfMatches	[ 0	locks=0	autoscope=0 ]	(	[ minNumberOfMatches	0 ] 	)
minInputTrackLength	[ 0	locks=0	autoscope=0 ]	(	[ minInputTrackLength	2 ] 	)
lockAllIntrinsics	[ 0	locks=0	autoscope=0 ]	(	[ lockAllIntrinsics	0 ] 	)
filterTrackForks	[ 0	locks=0	autoscope=0 ]	(	[ filterTrackForks	1 ] 	)
computeStructureColor	[ 0	locks=0 ]	(	"on"	)
useAutoTransform	[ 0	locks=0 ]	(	"on"	)
fd_advanced	[ 0	locks=0 ]	(	0	)
localizerEstimator	[ 0	locks=0	autoscope=0 ]	(	[ localizerEstimator	acransac ] 	)
localizerEstimatorMaxIterations	[ 0	locks=0	autoscope=0 ]	(	[ localizerEstimatorMaxIterations	4096 ] 	)
localizerEstimatorError	[ 0	locks=0	autoscope=0 ]	(	[ localizerEstimatorError	0 ] 	)
localBAGraphDistance	[ 0	locks=0	autoscope=0 ]	(	[ localBAGraphDistance	1 ] 	)
minNumberOfObservationsForTriangulation	[ 0	locks=0	autoscope=0 ]	(	[ minNumberOfObservationsForTriangulation	2 ] 	)
minAngleForTriangulation	[ 0	locks=0	autoscope=0 ]	(	[ minAngleForTriangulation	3 ] 	)
minAngleForLandmark	[ 0	locks=0	autoscope=0 ]	(	[ minAngleForLandmark	2 ] 	)
maxReprojectionError	[ 0	locks=0	autoscope=0 ]	(	[ maxReprojectionError	4 ] 	)
maxAngleInitialPair	[ 0	locks=0	autoscope=0 ]	(	[ maxAngleInitialPair	40 ] 	)
minAngleInitialPair	[ 0	locks=0	autoscope=0 ]	(	[ minAngleInitialPair	5 ] 	)
observationConstraint	[ 0	locks=0	autoscope=0 ]	(	[ observationConstraint	0 ] 	)
randomSeed	[ 0	locks=0	autoscope=0 ]	(	[ randomSeed	5489 ] 	)
useOnlyMatchesFromInputFolder	[ 0	locks=0	autoscope=0 ]	(	[ useOnlyMatchesFromInputFolder	0 ] 	)
useRigConstraint	[ 0	locks=0	autoscope=0 ]	(	[ useRigConstraint	1 ] 	)
interFileExtension	[ 0	locks=0	autoscope=0 ]	(	[ interFileExtension	.abc ] 	)
fd_advanced2	[ 0	locks=0	autoscope=0 ]	(	1	)
outputFileType	[ 0	locks=0	autoscope=0 ]	(	[ outputFileType	exr ] 	)
saveMetadata	[ 0	locks=0	autoscope=0 ]	(	[ saveMetadata	1 ] 	)
saveMatricesTxtFiles	[ 0	locks=0	autoscope=0 ]	(	[ saveMatricesTxtFiles	0 ] 	)
evCorrection	[ 0	locks=0	autoscope=0 ]	(	[ evCorrection	0 ] 	)
rangeStart	[ 0	locks=0	autoscope=0 ]	(	[ rangeStart	-1 ] 	)
rangeSize	[ 0	locks=0	autoscope=0 ]	(	[ rangeSize	1 ] 	)
version	[ 0	locks=0 ]	(	"Requires Meshroom/AliceVision version 2023.3.0"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_structure_from_motion1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_meshing1.init"
Content-Type: text/plain

type = labs::av_meshing::6.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_meshing1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 2.53629
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault off exposed on
outputsNamed3
{
0 "output1"
1 "output2"
}
inputsNamed3
{
2 	av_depth_map1 0 1 "input1"
}
inputs
{
0 	av_depth_map1 0 1
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.98 0.275 0.275 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_meshing1.chn"
Content-Type: text/plain

{
    channel reload {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../reload2\") }
    }
    channel bExportLog {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bExportLog\") }
    }
    channel enablecustomenv {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enablecustomenv\") }
    }
    channel estimateSpaceMinObservationAngle {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../estimateSpaceMinObservationAngle\") }
    }
    channel maxInputPoints {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 50000000 50000000 expr = ch(\"../maxInputPoints\") }
    }
    channel maxPoints {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5000000 5000000 expr = ch(\"../maxPoints\") }
    }
    channel colorizeOutput {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../colorizeOutput\") }
    }
    channel estimateSpaceFromSfM {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../estimateSpaceFromSfM\") }
    }
    channel helperPointsGridSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../helperPointsGridSize\") }
    }
    channel densifyNbFront {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../densifyNbFront\") }
    }
    channel densifyNbBack {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../densifyNbBack\") }
    }
    channel densifyScale {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../densifyScale\") }
    }
    channel maskHelperPointsWeight {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../maskHelperPointsWeight\") }
    }
    channel maskBorderSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../maskBorderSize\") }
    }
    channel nPixelSizeBehind {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../nPixelSizeBehind\") }
    }
    channel fullWeight {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../fullWeight\") }
    }
    channel estimateSpaceMinObservations {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 3 3 expr = ch(\"../estimateSpaceMinObservations\") }
    }
    channel maxPointsPerVoxel {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 6000000 6000000 expr = ch(\"../maxPointsPerVoxel\") }
    }
    channel minStep {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../minStep\") }
    }
    channel minVis {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../minVis\") }
    }
    channel partitioning {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = \"singleBlock\" }
    }
    channel repartition {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = \"multiResolution\" }
    }
    channel angleFactor {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 15 15 expr = ch(\"../angleFactor\") }
    }
    channel simFactor {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 15 15 expr = ch(\"../simFactor\") }
    }
    channel voteFilteringForWeaklySupportedSurfaces {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../voteFilteringForWeaklySupportedSurfaces\") }
    }
    channel minSolidAngleRatio {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.20000000000000001 0.20000000000000001 expr = ch(\"../minSolidAngleRatio\") }
    }
    channel pixSizeMarginInitCoef {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../pixSizeMarginInitCoef\") }
    }
    channel pixSizeMarginFinalCoef {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../pixSizeMarginFinalCoef\") }
    }
    channel voteMarginFactor {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../voteMarginFactor\") }
    }
    channel contributeMarginFactor {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../contributeMarginFactor\") }
    }
    channel simGaussianSizeInit {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../simGaussianSizeInit\") }
    }
    channel simGaussianSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../simGaussianSize\") }
    }
    channel minAngleThreshold {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.10000000000000001 0.10000000000000001 expr = ch(\"../minAngleThreshold\") }
    }
    channel refineFuse {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../refineFuse\") }
    }
    channel addLandmarksToTheDensePointCloud {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../addLandmarksToTheDensePointCloud\") }
    }
    channel seed {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../seed\") }
    }
    channel universePercentile {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.999 0.999 expr = ch(\"../universePercentile\") }
    }
    channel keepLargestMeshOnly {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../keepLargestMeshOnly\") }
    }
    channel smoothingIterations {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../smoothingIterations\") }
    }
    channel filterLargeTrianglesFactor {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 60 60 expr = ch(\"../filterLargeTrianglesFactor\") }
    }
    channel smoothingLambda {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../smoothingLambda\") }
    }
    channel filterTrianglesRatio {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../filterTrianglesRatio\") }
    }
    channel smoothingSubset {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../smoothingSubset\") }
    }
    channel smoothingBoundariesNeighbours {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../smoothingBoundariesNeighbours\") }
    }
    channel filteringSubset {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../filteringSubset\") }
    }
    channel filteringIterations {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../filteringIterations\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_meshing1.parm"
Content-Type: text/plain

{
version 0.8
cook	[ 0	locks=0 ]	(	0	)
reload	[ 0	locks=0 ]	(	[ reload	0 ] 	)
bExportLog	[ 0	locks=0	autoscope=0 ]	(	[ bExportLog	0 ] 	)
fd_environment	[ 0	locks=0 ]	(	0	)
enablecustomenv	[ 0	locks=0	autoscope=0 ]	(	[ enablecustomenv	0 ] 	)
customenv	[ 0	locks=0	autoscope=0 ]	(	`chs(\"../customenv\")`	)
sepparm	[ 0	locks=0 ]	(	)
fd_meshing	[ 0	locks=0 ]	(	0	0	)
estimateSpaceMinObservationAngle	[ 0	locks=0	autoscope=0 ]	(	[ estimateSpaceMinObservationAngle	10 ] 	)
maxInputPoints	[ 0	locks=0	autoscope=0 ]	(	[ maxInputPoints	5e7 ] 	)
maxPoints	[ 0	locks=0	autoscope=0 ]	(	[ maxPoints	5e6 ] 	)
colorizeOutput	[ 0	locks=0	autoscope=0 ]	(	[ colorizeOutput	1 ] 	)
fd_advanced	[ 0	locks=0 ]	(	0	)
estimateSpaceFromSfM	[ 0	locks=0	autoscope=0 ]	(	[ estimateSpaceFromSfM	1 ] 	)
helperPointsGridSize	[ 0	locks=0	autoscope=0 ]	(	[ helperPointsGridSize	10 ] 	)
densifyNbFront	[ 0	locks=0	autoscope=0 ]	(	[ densifyNbFront	0 ] 	)
densifyNbBack	[ 0	locks=0	autoscope=0 ]	(	[ densifyNbBack	0 ] 	)
densifyScale	[ 0	locks=0	autoscope=0 ]	(	[ densifyScale	1 ] 	)
maskHelperPointsWeight	[ 0	locks=0	autoscope=0 ]	(	[ maskHelperPointsWeight	0 ] 	)
maskBorderSize	[ 0	locks=0	autoscope=0 ]	(	[ maskBorderSize	1 ] 	)
nPixelSizeBehind	[ 0	locks=0	autoscope=0 ]	(	[ nPixelSizeBehind	4 ] 	)
fullWeight	[ 0	locks=0	autoscope=0 ]	(	[ fullWeight	1 ] 	)
estimateSpaceMinObservations	[ 0	locks=0	autoscope=0 ]	(	[ estimateSpaceMinObservations	3 ] 	)
maxPointsPerVoxel	[ 0	locks=0	autoscope=0 ]	(	[ maxPointsPerVoxel	6e6 ] 	)
minStep	[ 0	locks=0	autoscope=0 ]	(	[ minStep	2 ] 	)
minVis	[ 0	locks=0	autoscope=0 ]	(	[ minVis	2 ] 	)
partitioning	[ 0	locks=0	autoscope=0 ]	(	[ partitioning	singleBlock ] 	)
repartition	[ 0	locks=0	autoscope=0 ]	(	[ repartition	multiResolution ] 	)
angleFactor	[ 0	locks=0	autoscope=0 ]	(	[ angleFactor	15 ] 	)
simFactor	[ 0	locks=0	autoscope=0 ]	(	[ simFactor	15 ] 	)
voteFilteringForWeaklySupportedSurfaces	[ 0	locks=0	autoscope=0 ]	(	[ voteFilteringForWeaklySupportedSurfaces	1 ] 	)
minSolidAngleRatio	[ 0	locks=0	autoscope=0 ]	(	[ minSolidAngleRatio	0.2 ] 	)
pixSizeMarginInitCoef	[ 0	locks=0	autoscope=0 ]	(	[ pixSizeMarginInitCoef	2 ] 	)
pixSizeMarginFinalCoef	[ 0	locks=0	autoscope=0 ]	(	[ pixSizeMarginFinalCoef	4 ] 	)
voteMarginFactor	[ 0	locks=0	autoscope=0 ]	(	[ voteMarginFactor	4 ] 	)
contributeMarginFactor	[ 0	locks=0	autoscope=0 ]	(	[ contributeMarginFactor	2 ] 	)
simGaussianSizeInit	[ 0	locks=0	autoscope=0 ]	(	[ simGaussianSizeInit	10 ] 	)
simGaussianSize	[ 0	locks=0	autoscope=0 ]	(	[ simGaussianSize	10 ] 	)
minAngleThreshold	[ 0	locks=0	autoscope=0 ]	(	[ minAngleThreshold	0.1 ] 	)
refineFuse	[ 0	locks=0	autoscope=0 ]	(	[ refineFuse	1 ] 	)
addLandmarksToTheDensePointCloud	[ 0	locks=0	autoscope=0 ]	(	[ addLandmarksToTheDensePointCloud	0 ] 	)
seed	[ 0	locks=0	autoscope=0 ]	(	[ seed	0 ] 	)
universePercentile	[ 0	locks=0	autoscope=0 ]	(	[ universePercentile	0.999 ] 	)
saveRawDensePointCloud	[ 0	locks=0 ]	(	"on"	)
keepLargestMeshOnly	[ 0	locks=0	autoscope=0 ]	(	[ keepLargestMeshOnly	1 ] 	)
smoothingIterations	[ 0	locks=0	autoscope=0 ]	(	[ smoothingIterations	10 ] 	)
filterLargeTrianglesFactor	[ 0	locks=0	autoscope=0 ]	(	[ filterLargeTrianglesFactor	60 ] 	)
fd_advancedmesh	[ 0	locks=0 ]	(	0	)
smoothingLambda	[ 0	locks=0	autoscope=0 ]	(	[ smoothingLambda	1 ] 	)
filterTrianglesRatio	[ 0	locks=0	autoscope=0 ]	(	[ filterTrianglesRatio	0 ] 	)
smoothingSubset	[ 0	locks=0	autoscope=0 ]	(	[ smoothingSubset	0 ] 	)
smoothingBoundariesNeighbours	[ 0	locks=0	autoscope=0 ]	(	[ smoothingBoundariesNeighbours	0 ] 	)
filteringSubset	[ 0	locks=0	autoscope=0 ]	(	[ filteringSubset	0 ] 	)
filteringIterations	[ 0	locks=0	autoscope=0 ]	(	[ filteringIterations	1 ] 	)
version	[ 0	locks=0 ]	(	"Requires Meshroom/AliceVision version 2023.3.0"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_meshing1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	},
	"___toolcount___":{
		"type":"string",
		"value":"15"
	},
	"___toolid___":{
		"type":"string",
		"value":"object_spotlight"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/color1.init"
Content-Type: text/plain

type = color
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/color1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -2.70893 1.52043
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	av_meshing1 0 1 "input1"
}
inputs
{
0 	av_meshing1 0 1
}
stat
{
  create -1
  modify -1
  author prisms@threadripper1
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/color1.parm"
Content-Type: text/plain

{
version 0.8
group	[ 0	locks=0 ]	(	""	)
grouptype	[ 0	locks=0 ]	(	"guess"	)
deleteallcolorattribs	[ 0	locks=0 ]	(	"on"	)
enable	[ 0	locks=0 ]	(	"on"	)
class	[ 0	locks=0 ]	(	2	)
colortype	[ 0	locks=0 ]	(	0	)
color	[ 0	locks=0 ]	(	1	1	1	)
seed	[ 0	locks=0 ]	(	0	)
rampattribute	[ 0	locks=0 ]	(	""	)
ramprange	[ 0	locks=0 ]	(	0	1	)
ramp	[ 0	locks=0 ]	(	2	)
ramp1pos	[ 0	locks=0 ]	(	0	)
ramp1c	[ 0	locks=0 ]	(	0	0	0	)
ramp1interp	[ 0	locks=0 ]	(	"linear"	)
ramp2pos	[ 0	locks=0 ]	(	1	)
ramp2c	[ 0	locks=0 ]	(	1	1	1	)
ramp2interp	[ 0	locks=0 ]	(	"linear"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/color1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	},
	"___toolcount___":{
		"type":"string",
		"value":"2"
	},
	"___toolid___":{
		"type":"string",
		"value":"sop_color"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_initialize1.init"
Content-Type: text/plain

type = labs::av_initialize::6.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_initialize1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 6.53629
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault off exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
}
inputs
{
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.98 0.275 0.275 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_initialize1.multiparm"
Content-Type: text/plain

1
filename__# ../filename__#

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_initialize1.chn"
Content-Type: text/plain

{
    channel bExportLog {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bExportLog\") }
    }
    channel proj {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../proj\") }
    }
    channel cache_dir {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../cache_dir\") }
    }
    channel alice_dir {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../alice_dir\") }
    }
    channel enablecustomenv {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../enablecustomenv\") }
    }
    channel src_img {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5 5 expr = ch(\"../src_img\") }
    }
    channel defaultFieldOfView {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 45 45 expr = ch(\"../dof\") }
    }
    channel filename__1 {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      segment { length = 0 expr = chs(\"../filename__1\") }
    }
    channel filename__2 {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      segment { length = 0 expr = chs(\"../filename__2\") }
    }
    channel filename__3 {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      segment { length = 0 expr = chs(\"../filename__3\") }
    }
    channel filename__4 {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      segment { length = 0 expr = chs(\"../filename__4\") }
    }
    channel filename__5 {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      segment { length = 0 expr = chs(\"../filename__5\") }
    }
    channel filename__6 {
      lefttype = extend
      righttype = extend
      defaultString = \"\"
      flags = 0
      segment { length = 0 expr = chs(\"../filename__6\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_initialize1.parm"
Content-Type: text/plain

{
version 0.8
cook	[ 0	locks=0 ]	(	0	)
bExportLog	[ 0	locks=0	autoscope=0 ]	(	[ bExportLog	0 ] 	)
proj	[ 0	locks=0	autoscope=0 ]	(	[ proj	$HIPNAME ] 	)
cache_dir	[ 0	locks=0	autoscope=0 ]	(	[ cache_dir	$HIP/AV_Cache/ ] 	)
alice_dir	[ 0	locks=0	autoscope=0 ]	(	[ alice_dir	"" ] 	)
fd_environment	[ 0	locks=0 ]	(	0	)
enablecustomenv	[ 0	locks=0	autoscope=0 ]	(	[ enablecustomenv	0 ] 	)
customenv	[ 0	locks=0	autoscope=1 ]	(	`chs(\"../customenv\")`	)
sepparm	[ 0	locks=0 ]	(	)
images	[ 0	locks=0	autoscope=0 ]	(	1	1	)
add_img	[ 0	locks=0 ]	(	0	)
src_img	[ 0	locks=0	autoscope=0 ]	(	[ src_img	6 ] 	)
defaultFieldOfView	[ 0	locks=0	autoscope=0 ]	(	[ defaultFieldOfView	45 ] 	)
defaultFocalLengthPix	[ 0	locks=0 ]	(	-1	)
groupCameraFallback	[ 0	locks=0 ]	(	folder	)
rawColorInterpretation	[ 0	locks=0 ]	(	LibRawNoWhiteBalancing	)
version	[ 0	locks=0 ]	(	"Requires Meshroom/AliceVision version 2023.3.0"	)
filename__1	[ 0	locks=0 ]	(	[ filename__1	"" ] 	)
filename__2	[ 0	locks=0 ]	(	[ filename__2	"" ] 	)
filename__3	[ 0	locks=0 ]	(	[ filename__3	"" ] 	)
filename__4	[ 0	locks=0 ]	(	[ filename__4	"" ] 	)
filename__5	[ 0	locks=0 ]	(	[ filename__5	"" ] 	)
filename__6	[ 0	locks=0 ]	(	[ filename__6	"" ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_initialize1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_analyze_images1.init"
Content-Type: text/plain

type = labs::av_analyze_images::6.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_analyze_images1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 5.53629
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault off exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	av_initialize1 0 1 "input1"
}
inputs
{
0 	av_initialize1 0 1
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.98 0.275 0.275 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_analyze_images1.chn"
Content-Type: text/plain

{
    channel bExportLog {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bExportLog\") }
    }
    channel enablecustomenv {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enablecustomenv\") }
    }
    channel describerPreset {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../describerPreset\") }
    }
    channel describerQuality {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../describerQuality\") }
    }
    channel forceCpuExtraction {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../forceCpuExtraction\") }
    }
    channel maxThreads {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../maxThreads\") }
    }
    channel rangeStart {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeStart\") }
    }
    channel rangeSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../rangeSize\") }
    }
    channel gridFiltering {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../gridFiltering\") }
    }
    channel maxNbFeatures {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../maxNbFeatures\") }
    }
    channel contrastFiltering {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../contrastFiltering\") }
    }
    channel relativePeakThreshold {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.02 0.02 expr = ch(\"../relativePeakThreshold\") }
    }
    channel minNbImages {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 200 200 expr = ch(\"../minNbImages\") }
    }
    channel maxDescriptors {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 500 500 expr = ch(\"../maxDescriptors\") }
    }
    channel nbMatches {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 50 50 expr = ch(\"../nbMatches\") }
    }
    channel nbNeighbors {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 50 50 expr = ch(\"../nbNeighbors\") }
    }
    channel guidedMatching {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../guidedMatching\") }
    }
    channel crossMatching {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../crossMatching\") }
    }
    channel matchFromKnownCameraPoses {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../matchFromKnownCameraPoses\") }
    }
    channel photometricMatchingMethod {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../photometricMatchingMethod\") }
    }
    channel geometricEstimator {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../geometricEstimator\") }
    }
    channel geometricFilterType {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = chs(\"../geometricFilterType\") }
    }
    channel distanceRatio {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 0.80000000000000004 0.80000000000000004 expr = ch(\"../distanceRatio\") }
    }
    channel maxIteration {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2048 2048 expr = ch(\"../maxIteration\") }
    }
    channel geometricError {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../geometricError\") }
    }
    channel knownPosesGeometricErrorMax {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../knownPosesGeometricErrorMax\") }
    }
    channel maxMatches {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../maxMatches\") }
    }
    channel randomSeed {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5489 5489 expr = ch(\"../randomSeed\") }
    }
    channel savePutativeMatches {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../savePutativeMatches\") }
    }
    channel matchFilePerImage {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../matchFilePerImage\") }
    }
    channel useGridSort {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 1 1 expr = ch(\"../useGridSort\") }
    }
    channel exportDebugFiles {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../exportDebugFiles\") }
    }
    channel rangeStartMatching {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeStartMatching\") }
    }
    channel rangeSizeMatching {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../rangeSizeMatching\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_analyze_images1.parm"
Content-Type: text/plain

{
version 0.8
cook	[ 0	locks=0 ]	(	0	)
bExportLog	[ 0	locks=0	autoscope=0 ]	(	[ bExportLog	0 ] 	)
fd_environment	[ 0	locks=0 ]	(	0	)
enablecustomenv	[ 0	locks=0	autoscope=0 ]	(	[ enablecustomenv	0 ] 	)
customenv	[ 0	locks=0	autoscope=0 ]	(	`chs(\"../customenv\")`	)
sepparm	[ 0	locks=0 ]	(	)
fd_featureextraction	[ 0	locks=0 ]	(	0	0	0	)
describerTypes	[ 0	locks=0	autoscope=0 ]	(	sift	)
describerPreset	[ 0	locks=0	autoscope=0 ]	(	[ describerPreset	normal ] 	)
describerQuality	[ 0	locks=0	autoscope=0 ]	(	[ describerQuality	2 ] 	)
workingColorSpace	[ 0	locks=0 ]	(	sRGB	)
fd_advanced	[ 0	locks=0	autoscope=0 ]	(	1	)
forceCpuExtraction	[ 0	locks=0	autoscope=0 ]	(	[ forceCpuExtraction	0 ] 	)
maxThreads	[ 0	locks=0	autoscope=0 ]	(	[ maxThreads	0 ] 	)
rangeStart	[ 0	locks=0	autoscope=0 ]	(	[ rangeStart	-1 ] 	)
rangeSize	[ 0	locks=0	autoscope=0 ]	(	[ rangeSize	1 ] 	)
gridFiltering	[ 0	locks=0	autoscope=0 ]	(	[ gridFiltering	1 ] 	)
maxNbFeatures	[ 0	locks=0	autoscope=0 ]	(	[ maxNbFeatures	0 ] 	)
contrastFiltering	[ 0	locks=0	autoscope=0 ]	(	[ contrastFiltering	0 ] 	)
relativePeakThreshold	[ 0	locks=0	autoscope=0 ]	(	[ relativePeakThreshold	0.02 ] 	)
method	[ 0	locks=0 ]	(	SequentialAndVocabularyTree	)
fd_advanced2	[ 0	locks=0 ]	(	0	)
minNbImages	[ 0	locks=0	autoscope=0 ]	(	[ minNbImages	200 ] 	)
maxDescriptors	[ 0	locks=0	autoscope=0 ]	(	[ maxDescriptors	500 ] 	)
nbMatches	[ 0	locks=0	autoscope=0 ]	(	[ nbMatches	50 ] 	)
nbNeighbors	[ 0	locks=0	autoscope=0 ]	(	[ nbNeighbors	50 ] 	)
guidedMatching	[ 0	locks=0	autoscope=0 ]	(	[ guidedMatching	0 ] 	)
crossMatching	[ 0	locks=0	autoscope=0 ]	(	[ crossMatching	0 ] 	)
matchFromKnownCameraPoses	[ 0	locks=0	autoscope=0 ]	(	[ matchFromKnownCameraPoses	0 ] 	)
fd_advanced3	[ 0	locks=0 ]	(	0	)
photometricMatchingMethod	[ 0	locks=0	autoscope=0 ]	(	[ photometricMatchingMethod	ANN_L2 ] 	)
geometricEstimator	[ 0	locks=0	autoscope=0 ]	(	[ geometricEstimator	acransac ] 	)
geometricFilterType	[ 0	locks=0	autoscope=0 ]	(	[ geometricFilterType	fundamental_matrix ] 	)
distanceRatio	[ 0	locks=0	autoscope=0 ]	(	[ distanceRatio	0.8 ] 	)
maxIteration	[ 0	locks=0	autoscope=0 ]	(	[ maxIteration	2048 ] 	)
geometricError	[ 0	locks=0	autoscope=0 ]	(	[ geometricError	0 ] 	)
knownPosesGeometricErrorMax	[ 0	locks=0	autoscope=0 ]	(	[ knownPosesGeometricErrorMax	4 ] 	)
maxMatches	[ 0	locks=0	autoscope=0 ]	(	[ maxMatches	0 ] 	)
randomSeed	[ 0	locks=0	autoscope=0 ]	(	[ randomSeed	5489 ] 	)
savePutativeMatches	[ 0	locks=0	autoscope=0 ]	(	[ savePutativeMatches	0 ] 	)
matchFilePerImage	[ 0	locks=0	autoscope=0 ]	(	[ matchFilePerImage	0 ] 	)
useGridSort	[ 0	locks=0	autoscope=0 ]	(	[ useGridSort	1 ] 	)
exportDebugFiles	[ 0	locks=0	autoscope=0 ]	(	[ exportDebugFiles	0 ] 	)
rangeStartMatching	[ 0	locks=0	autoscope=0 ]	(	[ rangeStartMatching	-1 ] 	)
rangeSizeMatching	[ 0	locks=0	autoscope=0 ]	(	[ rangeSizeMatching	0 ] 	)
version	[ 0	locks=0 ]	(	"Requires Meshroom/AliceVision version 2023.3.0"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_analyze_images1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_depth_map1.init"
Content-Type: text/plain

type = labs::av_depth_map::6.0
matchesdef = 1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_depth_map1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 0 3.53629
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault off exposed on
outputsNamed3
{
0 "output1"
}
inputsNamed3
{
1 	av_structure_from_motion1 0 1 "input1"
}
inputs
{
0 	av_structure_from_motion1 0 1
}
stat
{
  create -1
  modify -1
  author Danicka@DESKTOP-2416QFR
  access 0777
}
color UT_Color RGB 0.98 0.275 0.275 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_depth_map1.chn"
Content-Type: text/plain

{
    channel bExportLog {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../bExportLog\") }
    }
    channel enablecustomenv {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../enablecustomenv\") }
    }
    channel downscale {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../downscale\") }
    }
    channel minViewAngle {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 2 2 expr = ch(\"../minViewAngle\") }
    }
    channel maxViewAngle {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 70 70 expr = ch(\"../maxViewAngle\") }
    }
    channel sgmMaxTCams {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../sgmMaxTCams\") }
    }
    channel sgmWSH {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../sgmWSH\") }
    }
    channel sgmGammaC {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 5.5 5.5 expr = ch(\"../sgmGammaC\") }
    }
    channel sgmGammaP {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 8 8 expr = ch(\"../sgmGammaP\") }
    }
    channel refineMaxTCams {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 6 6 expr = ch(\"../refineMaxTCams\") }
    }
    channel refineNSamplesHalf {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 150 150 expr = ch(\"../refineNSamplesHalf\") }
    }
    channel refineNDepthsToRefine {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 31 31 expr = ch(\"../refineNDepthsToRefine\") }
    }
    channel refineNiters {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 100 100 expr = ch(\"../refineNiters\") }
    }
    channel refineWSH {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 3 3 expr = ch(\"../refineWSH\") }
    }
    channel refineSigma {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 15 15 expr = ch(\"../refineSigma\") }
    }
    channel refineGammaC {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 15.5 15.5 expr = ch(\"../refineGammaC\") }
    }
    channel refineGammaP {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 8 8 expr = ch(\"../refineGammaP\") }
    }
    channel refineUseTcOrRcPixSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../refineUseTcOrRcPixSize\") }
    }
    channel exportIntermediateResults {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../exportIntermediateResults\") }
    }
    channel nbGPUs {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../nbGPUs\") }
    }
    channel rangeStart {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeStart3\") }
    }
    channel rangeSize {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeSize3\") }
    }
    channel minNumOfConsistentCams {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 3 3 expr = ch(\"../minNumOfConsistentCams\") }
    }
    channel minNumOfConsistentCamsWithLowSimilarity {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 4 4 expr = ch(\"../minNumOfConsistentCamsWithLowSimilarity\") }
    }
    channel nNearestCams {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = 10 10 expr = ch(\"../nNearestCams\") }
    }
    channel pixSizeBall {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../pixSizeBall\") }
    }
    channel pixSizeBallWithLowSimilarity {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../pixSizeBallWithLowSimilarity\") }
    }
    channel computeNormalMaps {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../computeNormalMaps\") }
    }
    channel rangeStartFilter {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeStartFilter\") }
    }
    channel rangeSizeFilter {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 value = -1 -1 expr = ch(\"../rangeSizeFilter\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_depth_map1.parm"
Content-Type: text/plain

{
version 0.8
cook	[ 0	locks=0 ]	(	0	)
bExportLog	[ 0	locks=0	autoscope=0 ]	(	[ bExportLog	0 ] 	)
fd_environment	[ 0	locks=0 ]	(	0	)
enablecustomenv	[ 0	locks=0	autoscope=0 ]	(	[ enablecustomenv	0 ] 	)
customenv	[ 0	locks=0	autoscope=0 ]	(	`chs(\"../customenv\")`	)
sepparm	[ 0	locks=0 ]	(	)
fd_depthmap	[ 0	locks=0 ]	(	0	0	)
downscale	[ 0	locks=0	autoscope=0 ]	(	[ downscale	2 ] 	)
fd_tiling	[ 0	locks=0 ]	(	0	)
tileBufferWidth	[ 0	locks=0 ]	(	1024	)
tileBufferHeight	[ 0	locks=0 ]	(	1024	)
tilePadding	[ 0	locks=0 ]	(	64	)
fd_advanced	[ 0	locks=0 ]	(	0	)
minViewAngle	[ 0	locks=0	autoscope=0 ]	(	[ minViewAngle	2 ] 	)
maxViewAngle	[ 0	locks=0	autoscope=0 ]	(	[ maxViewAngle	70 ] 	)
sgmMaxTCams	[ 0	locks=0	autoscope=0 ]	(	[ sgmMaxTCams	10 ] 	)
sgmWSH	[ 0	locks=0	autoscope=0 ]	(	[ sgmWSH	4 ] 	)
sgmGammaC	[ 0	locks=0	autoscope=0 ]	(	[ sgmGammaC	5.5 ] 	)
sgmGammaP	[ 0	locks=0	autoscope=0 ]	(	[ sgmGammaP	8 ] 	)
refineMaxTCams	[ 0	locks=0	autoscope=0 ]	(	[ refineMaxTCams	6 ] 	)
refineNSamplesHalf	[ 0	locks=0	autoscope=0 ]	(	[ refineNSamplesHalf	150 ] 	)
refineNDepthsToRefine	[ 0	locks=0	autoscope=0 ]	(	[ refineNDepthsToRefine	31 ] 	)
refineNiters	[ 0	locks=0	autoscope=0 ]	(	[ refineNiters	100 ] 	)
refineWSH	[ 0	locks=0	autoscope=0 ]	(	[ refineWSH	3 ] 	)
refineSigma	[ 0	locks=0	autoscope=0 ]	(	[ refineSigma	15 ] 	)
refineGammaC	[ 0	locks=0	autoscope=0 ]	(	[ refineGammaC	15.5 ] 	)
refineGammaP	[ 0	locks=0	autoscope=0 ]	(	[ refineGammaP	8 ] 	)
refineUseTcOrRcPixSize	[ 0	locks=0	autoscope=0 ]	(	[ refineUseTcOrRcPixSize	0 ] 	)
exportIntermediateResults	[ 0	locks=0	autoscope=0 ]	(	[ exportIntermediateResults	0 ] 	)
nbGPUs	[ 0	locks=0	autoscope=0 ]	(	[ nbGPUs	0 ] 	)
rangeStart	[ 0	locks=0	autoscope=0 ]	(	[ rangeStart	-1 ] 	)
rangeSize	[ 0	locks=0	autoscope=0 ]	(	[ rangeSize	-1 ] 	)
minNumOfConsistentCams	[ 0	locks=0	autoscope=0 ]	(	[ minNumOfConsistentCams	3 ] 	)
minNumOfConsistentCamsWithLowSimilarity	[ 0	locks=0	autoscope=0 ]	(	[ minNumOfConsistentCamsWithLowSimilarity	4 ] 	)
fd_advanced2	[ 0	locks=0 ]	(	0	)
nNearestCams	[ 0	locks=0	autoscope=0 ]	(	[ nNearestCams	10 ] 	)
pixSizeBall	[ 0	locks=0	autoscope=0 ]	(	[ pixSizeBall	0 ] 	)
pixSizeBallWithLowSimilarity	[ 0	locks=0	autoscope=0 ]	(	[ pixSizeBallWithLowSimilarity	0 ] 	)
computeNormalMaps	[ 0	locks=0	autoscope=0 ]	(	[ computeNormalMaps	0 ] 	)
rangeStartFilter	[ 0	locks=0	autoscope=0 ]	(	[ rangeStartFilter	-1 ] 	)
rangeSizeFilter	[ 0	locks=0	autoscope=0 ]	(	[ rangeSizeFilter	-1 ] 	)
version	[ 0	locks=0 ]	(	"Requires Meshroom/AliceVision version 2023.3.0"	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/av_depth_map1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":""
	},
	"___toolcount___":{
		"type":"string",
		"value":"14"
	},
	"___toolid___":{
		"type":"string",
		"value":"object_spotlight"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output1.init"
Content-Type: text/plain

type = output
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 3.8298 -0.00948423
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	av_meshing1 1 1 "input1"
}
inputs
{
0 	av_meshing1 1 1
}
stat
{
  create -1
  modify -1
  author Paul_Ambrosiussen@DESKTOP-A0373M3
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output1.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	1	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output2.init"
Content-Type: text/plain

type = output
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output2.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 5.55112e-17 -2.28286
connectornextid 2
flags =  lock off model off template off footprint off xray off bypass off display on render on highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
1 "output1"
}
inputsNamed3
{
0 	switch1 2 1 "input1"
}
inputs
{
0 	switch1 0 1
}
stat
{
  create -1
  modify -1
  author Paul_Ambrosiussen@DESKTOP-A0373M3
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output2.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	0	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output2.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.init"
Content-Type: text/plain

type = output
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position 3.8298 2.41244
connectornextid 1
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
}
inputsNamed3
{
0 	av_structure_from_motion1 1 1 "input1"
}
inputs
{
0 	av_structure_from_motion1 1 1
}
stat
{
  create -1
  modify -1
  author paula@DESKTOP-5213MPP
  access 0777
}
color UT_Color RGB 0.8 0.8 0.8 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.parm"
Content-Type: text/plain

{
version 0.8
outputidx	[ 0	locks=0 ]	(	2	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/output0.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch1.init"
Content-Type: text/plain

type = switch
matchesdef = 0

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch1.def"
Content-Type: text/plain

sopflags sopflags = 
comment ""
position -9.31323e-09 -1.22326
connectornextid 3
flags =  lock off model off template off footprint off xray off bypass off display off render off highlight off unload off savedata off compress on colordefault on exposed on
outputsNamed3
{
2 "output1"
}
inputsNamed3
{
1 	av_texturing1 0 1 "input1"
0 	av_meshing1 0 1 "input2"
}
inputs
{
0 	av_texturing1 0 1
1 	av_meshing1 0 1
}
stat
{
  create -1
  modify -1
  author paula@DESKTOP-5213MPP
  access 0777
}
color UT_Color RGB 0.8 1 0.7 
delscript ""
exprlanguage hscript
end

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch1.chn"
Content-Type: text/plain

{
    channel input {
      lefttype = extend
      righttype = extend
      flags = 0
      segment { length = 0 expr = ch(\"../mColorMode\") }
    }
  }

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch1.parm"
Content-Type: text/plain

{
version 0.8
input	[ 8	locks=0 ]	(	[ input	0 ] 	)
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot/switch1.userdata"
Content-Type: text/plain

{
	"___Version___":{
		"type":"string",
		"value":"___EXTERNAL___"
	}
}

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.order"
Content-Type: text/plain

11
av_texturing1
av_structure_from_motion1
av_meshing1
color1
av_initialize1
av_analyze_images1
av_depth_map1
output1
output2
output0
switch1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY
Content-Disposition: attachment; filename="hdaroot.net"
Content-Type: text/plain

1

--HOUDINIMIMEBOUNDARY0xD3ADD339-0x00000F49-0x56B122C9-0x00000001HOUDINIMIMEBOUNDARY--
